1. What is JavaScript, and how is it different from Java?
Answer: JavaScript is a lightweight, interpreted programming language primarily used for adding interactivity to web pages.
        Java is a compiled, object-oriented programming language used for building applications across platforms.
Syntax :
// JavaScript Example:
console.log("Hello, JavaScript!");
// Java Example:
System.out.println("Hello, Java!");

2. What are variables in JavaScript, and how do you declare them?
Answer: Variables store data. Use var, let, or const.
Syntax :
var x = 10;  // Old way
let y = 20;  // Modern, allows reassignment
const z = 30; // Modern, immutable
console.log(x, y, z);

3. What are data types in JavaScript? Can you name a few examples?
Answer: 
Data types include: Primitive: string, number, boolean, null, undefined, symbol, bigint.
Non-primitive     : object, array, function.
Syntax :
let a = "Hello";  // string
let b = 42;       // number
let c = true;     // boolean
let d = null;     // null
let e;            // undefined
let f = { name: "John" };  // object
console.log(typeof a, typeof b, typeof c);

4. What is the purpose of console.log()?
Answer: console.log() prints messages to the browser console, useful for debugging.
Syntax : 
let name = "Alice";
console.log("Hello, " + name);  // Output: Hello, Alice
# The console.log() function is one of the simplest and most effective tools for debugging JavaScript code.
It helps you inspect values, understand program flow, and detect errors.

5. What are functions in JavaScript, and how do you define one?
Answer: A function is a reusable block of code.
Syntax :
// Function Declaration
function greet(name) {
  return `Hello, ${name}!`;
}
// Function Expression
const add = function (a, b) {
  return a + b;
};
console.log(greet("Alice")); // Output: Hello, Alice!
console.log(add(2, 3));      // Output: 5

6. What are arrays in JavaScript, and how do you add or remove elements?
Answer: Arrays store lists of values.
Syntax : 
let arr = [1, 2, 3];
arr.push(4);     // Add 4 at the end
arr.pop();       // Remove last element
arr.unshift(0);  // Add 0 at the start
arr.shift();     // Remove first element
console.log(arr); // Output: [1, 2, 3]

7. What is an object in JavaScript, and how does it differ from an array?
Answer: An object stores key-value pairs; arrays store ordered lists.
Syntax :
// Object
let obj = { name: "Alice", age: 25 };
console.log(obj.name);  // Access property
obj.age = 26;           // Modify property
console.log(obj);
// Array
let arr = [1, 2, 3];
console.log(arr[0]);    // Access first element

##What is an Object in JavaScript?
i> An object in JavaScript is a data structure used to store collections of related data (key-value pairs) and functionality (methods). 
Objects allow you to group properties and methods into a single entity
ii> In JavaScript, the object data type is a non-primitive data type used to store collections of key-value pairs and complex entities. While primitive data types (e.g., string, number, boolean) store a single value,
    objects can store multiple values and provide functionality through methods.

iii> Types of Object Data Types in JavaScript

01) Plain Objects (Object Literals):
The most common form of objects in JavaScript.
Syntax :
let person = {
  name: "Alice",
  age: 25,
  isStudent: true
};
console.log(person.name); // Output: Alice
02) Arrays:
Arrays are specialized objects with numeric keys.
Syntax :
let numbers = [1, 2, 3];
console.log(numbers[0]); // Output: 1
03) Functions:
Functions are objects that are callable and can have properties.
Syntax : 
function greet() {
  console.log("Hello!");
}
greet(); // Output: Hello!

04) Special Built-in Objects:
JavaScript has built-in objects like Date, Math, Set, Map, etc.
Syntax :
let now = new Date();
console.log(now.toDateString()); // Output: Current date as a string

let map = new Map();
map.set("key", "value");
console.log(map.get("key")); // Output: value

8. What is the difference between == and ===?
Answer: 
      == compares values, allowing type coercion.
          Type coercion is the automatic conversion of data from one type to another. It's a fundamental concept in programming that helps ensure data compatibility and consistency
      === compares both value and type.
Syntax :
console.log(5 == "5");  // true (type coercion)
console.log(5 === "5"); // false (strict comparison)

9. What is an event in JavaScript, and how do you handle events?
Answer: Events are user actions like clicks. Use addEventListener() to handle them.
Syntax :
document.getElementById("btn").addEventListener("click", function () {
  alert("Button clicked!");
});
HTML:
<button id="btn">Click Me</button>

10. What is the DOM, and how does JavaScript interact with it?
Answer: The Document Object Model (DOM) is a programming interface for web documents.
It represents the structure of a webpage as a hierarchical tree of objects, where every element in an HTML or XML document is modeled as a node.
The DOM allows programming languages like JavaScript to interact with, modify, and control the content, structure, and styles of a webpage dynamically

##JavaScript uses the document object to interact with the DOM.JavaScript interacts with the DOM:
@. Accessing Elements
JavaScript can select elements using various methods:
By ID:
Syntax:
let title = document.getElementById("myTitle");
console.log(title.textContent); // Outputs the text of the element with ID "myTitle"
@. By Class Name:
Syntax:
let items = document.getElementsByClassName("list-item");
console.log(items[0].textContent); // Accesses the first element with class "list-item"
@. By Tag Name:
Syntax:
let paragraphs = document.getElementsByTagName("p");
console.log(paragraphs[0].textContent); // Accesses the first <p> tag
@. By CSS Selector:
Syntax :
let header = document.querySelector("h1");
let links = document.querySelectorAll(".link");

2. Modifying Content
You can dynamically change the content of elements:

Change Text:
Syntax
let heading = document.getElementById("myHeading");
heading.textContent = "Updated Heading!";

Change HTML:
Syntax:
let container = document.getElementById("container");
container.innerHTML = "<p>New paragraph content!</p>";

3. Changing Styles
You can modify CSS styles using the style property:
Syntax:
let box = document.getElementById("box");
box.style.backgroundColor = "blue";
box.style.color = "white";
box.style.fontSize = "20px";
4. Adding or Removing Elements
Add Elements:
Syntax:
let list = document.getElementById("myList");
let newItem = document.createElement("li");
newItem.textContent = "New Item";
list.appendChild(newItem);
Remove Elements:
Syntax:
let itemToRemove = document.getElementById("oldItem");
itemToRemove.remove();
5. Handling Events
JavaScript interacts with the DOM to respond to user actions through events.
Syntax :
let button = document.getElementById("myButton");
button.addEventListener("click", function () {
  alert("Button clicked!");
});
##Why is the DOM Important?
Answer: Enables interactivity on web pages (e.g., form validation, animations).
        Makes it possible to build dynamic and responsive web applications.
        Forms the foundation for JavaScript frameworks like React, Angular, and Vue.js.
